// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tanger_API.Models;

#nullable disable

namespace Tanger_API.Migrations
{
    [DbContext(typeof(Tanger_APIDbContext))]
    [Migration("20240513170645_first-migration")]
    partial class firstmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tanger_API.Models.AirPollution", b =>
                {
                    b.Property<int>("AirPollutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AirPollutionId"));

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Pollutant")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PollutantLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResourceId")
                        .HasColumnType("int");

                    b.Property<int?>("SolutionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("AirPollutionId");

                    b.HasIndex("ResourceId");

                    b.HasIndex("SolutionId");

                    b.ToTable("AirPollutions");
                });

            modelBuilder.Entity("Tanger_API.Models.Citizen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Citizens");
                });

            modelBuilder.Entity("Tanger_API.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Tanger_API.Models.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Calories")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("Tanger_API.Models.ForestPollution", b =>
                {
                    b.Property<int>("ForestPollutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ForestPollutionId"));

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Pollutant")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResourceId")
                        .HasColumnType("int");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SolutionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("ForestPollutionId");

                    b.HasIndex("ResourceId");

                    b.HasIndex("SolutionId");

                    b.ToTable("ForestPollutions");
                });

            modelBuilder.Entity("Tanger_API.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int?>("ResourceId")
                        .HasColumnType("int");

                    b.Property<int?>("SolutionId")
                        .HasColumnType("int");

                    b.HasKey("LocationId");

                    b.HasIndex("ResourceId");

                    b.HasIndex("SolutionId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Tanger_API.Models.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("Tanger_API.Models.Solution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Solutions");
                });

            modelBuilder.Entity("Tanger_API.Models.WaterWaste", b =>
                {
                    b.Property<int>("WaterWasteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WaterWasteId"));

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("ResourceId")
                        .HasColumnType("int");

                    b.Property<int?>("SolutionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("WasteType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WasteVolume")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WaterWasteId");

                    b.HasIndex("ResourceId");

                    b.HasIndex("SolutionId");

                    b.ToTable("WaterWastes");
                });

            modelBuilder.Entity("Tanger_API.Models.AirPollution", b =>
                {
                    b.HasOne("Tanger_API.Models.Resource", null)
                        .WithMany("AirPollution")
                        .HasForeignKey("ResourceId");

                    b.HasOne("Tanger_API.Models.Solution", null)
                        .WithMany("AirPollution")
                        .HasForeignKey("SolutionId");
                });

            modelBuilder.Entity("Tanger_API.Models.ForestPollution", b =>
                {
                    b.HasOne("Tanger_API.Models.Resource", null)
                        .WithMany("ForestPollution")
                        .HasForeignKey("ResourceId");

                    b.HasOne("Tanger_API.Models.Solution", null)
                        .WithMany("ForestPollution")
                        .HasForeignKey("SolutionId");
                });

            modelBuilder.Entity("Tanger_API.Models.Location", b =>
                {
                    b.HasOne("Tanger_API.Models.Resource", null)
                        .WithMany("Locations")
                        .HasForeignKey("ResourceId");

                    b.HasOne("Tanger_API.Models.Solution", null)
                        .WithMany("Locations")
                        .HasForeignKey("SolutionId");
                });

            modelBuilder.Entity("Tanger_API.Models.Resource", b =>
                {
                    b.HasOne("Tanger_API.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Tanger_API.Models.Solution", b =>
                {
                    b.HasOne("Tanger_API.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Tanger_API.Models.WaterWaste", b =>
                {
                    b.HasOne("Tanger_API.Models.Resource", null)
                        .WithMany("WaterWaste")
                        .HasForeignKey("ResourceId");

                    b.HasOne("Tanger_API.Models.Solution", null)
                        .WithMany("WaterWaste")
                        .HasForeignKey("SolutionId");
                });

            modelBuilder.Entity("Tanger_API.Models.Resource", b =>
                {
                    b.Navigation("AirPollution");

                    b.Navigation("ForestPollution");

                    b.Navigation("Locations");

                    b.Navigation("WaterWaste");
                });

            modelBuilder.Entity("Tanger_API.Models.Solution", b =>
                {
                    b.Navigation("AirPollution");

                    b.Navigation("ForestPollution");

                    b.Navigation("Locations");

                    b.Navigation("WaterWaste");
                });
#pragma warning restore 612, 618
        }
    }
}
